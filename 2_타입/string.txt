- 문자열을 세가지 따옴표로 생성 가능 
- length로 문자열의 길이를 얻음

const s1 = 'abc'
const s2 = "abc"
const s3 = `abc`// back tick

-----------------------------------------------------------------

- 문자열 concatenation

const name = 'mike'
const age = 23

const text1 = 'name: ' + name + ', age: ' + age
const text2 = `name: ${name}, age: ${age}`

-----------------------------------------------------------------

- 줄 바꿈 표현법
- \n을 쓰거나 백틱에서 엔터를 쳐라

const text1 = '할 일 목록\n* 운동하기\n* 요리하기'
const text2 = `할 일 목록
* 운동하기
* 요리하기`

-----------------------------------------------------------------

- 개별문자 추출은 [index]로 얻어와라
- immutable이라 값의 직접 수정이 불가

const s1 = 'abcd'
const c1 = s1[1]
console.log(c1)

const s2 = 'abcd'
s2[1] = 'z' // 불가능
console.log(s2)


- replace 메소드로 대체된 문자열을 얻을 수 있다.

const input = 'This is my car. The car is mine'
const output = input.replace('car', 'bike') // 처음 만난 문자열만 변경

input.replace(/car/g, 'bike') // 정규표현식으로 모두 대체
input.replaceAll('car', 'bike') // 비교적 최근 추가된 메서드

-----------------------------------------------------------------

- includes로 문자열의 포함여부를 검사해줌

s1.includes('준식')
s1.includes('준식', 10) // 시작 인덱스를 지정 가능

- startsWith로 문자열의 시작을 검사

s2.startsWith('This is') 

- endsWith으로 문자열의 끝쪽을 검사

s2.endsWith('동탄')

---------------------------------------------------------------

- 문자열의 부분 추출

const s1 = 'abcdefg'

s1.substr(0, 4) // 시작 인덱스, 길이

- indexOf()로 문자열의 위치 파악

let pos = s1.indexOf(' ')
s1.substr(0, pos)
pos = s1.lastIndexOf(' ')
s1.substr(pos + 1)

s1.slice(5, 7) // 시작인덱스, 끝 인덱스

--------------------------------------------------------------

- split, join

const s1 = 'This is my car. The car is mine'
console.log(s1.split(' ')) // 배열

const arr = s1.split('.')
console.log(arr)
console.log(arr.map(item => item.trim())) // trim은 앞뒤의 공백을 제거


s1.split(' ').join()
s1.split(' ').join('..')

--------------------------------------------------------------

- padStart, padEnd

'12'.padStart(5, '0') // 00012
'123'.padEnd(5, '*') // 123**


- match
- 정규표현식에 해당하는 문자열 추출가능

const s1 = 'This is my ar. The car is mine'
s1.match(/T[^\s-]*/g)

-----------------------------------------------------------

- tagged template literal
- 백틱을 이용하여 함수를 독특하게 호출
- 함수에서 문자열과 표현식이 구분되어 입력됨
- strings의 개수는 항상 expressions보다 하나 많다.

function taggedFunc(strings, ...expressions) {
  console.log({ strings, expressions})
  return 123
}
const v1 = 10
const v2 = 20
const result = taggedFunc`a-${v1}-b-${v2}`
console.log(result)



function highlight(strings, ...expressions) {
  return strings.reduce(
    (acc, str, i) => 
      expressions.length === i 
      ? `${acc}${str}`
      : `${acc}${str}<strong>${expressions[i]}</strong>`,
      ''
  )
}

const v1 = 10
const v2 = 20
const result = highlight`a ${v1} b ${v2}`
console.log(result)
highlight(['a ', ' b ', ''], v1, v2)