- map, filter, take 구현
- 새로운 배열 객체의 생성없이 호출

function* map(iter, mapper) {
  for(const v of iter) {
    yield mapper(v)
  }
}

function* filter(iter, test) {
  for(const v of iter) {
      if(test(v)) {
          yield v;
      }
  }
}

function* take(n, iter) {
  for(const v of iter) {
    yield v;
    if (--n <= 0) return
  }
}

const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
const result = take(
  3,
  map(
    filter(values, n => n % 2 === 0),
    n => n * 10
  )
) // 제네레이터 객체만 생성됨
console.log([...result]) // 중간단계의 배열이 없어도 됨

- 값이 필요한 순간에 각 element마다 평가됨
- 지연 평가

--------------------------------------------------

- 무한대

function* naturalNumbers() {
  let v = 1;
  while(true) {
    yield v++;
  }
}

const values = naturalNumbers()
const result = take(
  3,
  map(
    filter(values, n => n % 2 === 0),
    n => n * 10
  )
)
console.log([...result])

--------------------------------------------------

- yield* {이터러블}
- 이터러블의 done이 true가 될때까지 수행

function* g1() {
  yield 1;
  yield* [2, 3]
  yield 4; 
}

function* g2() {
  yield 1;
  for(const v of [2, 3]) {
    yield v
  }
  yield 4;
}

--------------------------------------------------

- 데이터 교환
- next의 인자로 yield의 반환값을 결정가능

function* f1() {
  const data1 = yield
  console.log(data1)
  const data2 = yield
  console.log(data2)
}
const gen = f1()
gen.next()
gen.next(10)
gen.next(20)

--------------------------------------------------

- 다른 함수와 협업 멀티태스킹 
- 실행을 멈추고 재개하는 것이 가능하므로 멀티태스킹이 가능
- 실행의 종료를 자발적으로 하므로 협업 멀티태스킹

function* minsu() {
  const myMsgList = [
    '안녕 나는 민수야',
    '만나서 반가워',
    '내일 영화 볼래?',
    '시간 안 되니?',
    '내일모레는 어때?',
  ]
  for (const msg of myMsgList) {
    console.log('수지:', yield msg)
  }
}
function suji() {
  const myMsgList = ['', '안녕 나는 수지야', '그래 반가워', '...']
  const gen = minsu()
  for(const msg of myMsgList) {
    console.log('민수:', gen.next(msg).value)
  }
}
suji()

--------------------------------------------------

- 예외처리
- 제네레이터에서 예외 발생 시 next()호출부에 예외 전파
- 예외발생시 이후에 yield가 있어도 done은 true

function* genFunc() {
  throw new Error('some error')
  yield 10
}
function func() {
  const gen = genFunc()
  try {
    gen.next()        
  } catch(e) {
    console.log('in catch')
    console.log(gen.next())
  }
}
func()