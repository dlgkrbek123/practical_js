- 제너레이터
- 함수의 실행을 중간에 멈추고 재개할 수 있는 함수

function* f1() {
  yield 10; // 함수의 실행을 멈추며 값을 전달
  yield 10;
  return 'finished'
}
const gen = f1() // 제너레이터 객체

--------------------------------------------------

- 제너레이터 객체는 next 메서드를 가짐
- yield를 만날떄가지 함수를 실행시킴
- 함수는 { value, done }을 리턴
- done은 boolean, value는 값이나 undefined
- 제너레이터 객체는 iterable이면서 iterator

function* f1() {
  console.log('f1-1')
  yield 10;
  console.log('f1-2')
  yield 20;
  console.log('f1-3')
  return 'finished' // done을 true
}
const gen = f1()
console.log(gen.next())
console.log(gen.next())
console.log(gen.next())

--------------------------------------------------

- 제너레이터 객체의 return 메소드로 함수의 실행을 강제 종료

function* f1() {
  console.log('f1-1')
  yield 10;
  console.log('f1-2')
  yield 20;
  console.log('f1-3')
  return 'finished' // done을 true
}
const gen = f1()
console.log(gen.next())
console.log(gen.return('abc'))
console.log(gen.next())

--------------------------------------------------

- 제너레이터 객체의 throw 메소드로 실행시점에 예외발생

function* f1() {
  try {
    console.log('f1-1')
    yield 10;
    console.log('f1-2') // skip
    yield 20;
  } catch(e) {
    console.log('f1-catch', e)
    yield 30;
    console.log('f1-3')
    yield 40;
    console.log('f1-4')
  }
}
const gen = f1()
console.log(gen.next())
console.log(gen.throw('some error'))
console.log(gen.next())
console.log(gen.next())
