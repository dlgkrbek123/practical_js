- 옵셔널 체이닝 (?.)
- 객체의 속성에 체이닝해서 접근시 왼쪽에서 오른쪽으로 계속 검사해야 함
- 왼쪽항의 존재여부를 확인해서 접근 ( undefined or do )
- 에러를 회피

const person = null 
const name = person && person.name
const name2 = person?.name // 좌측을 검사해서 null이나 undefined이면 undefined 아니면 원본값의 속성

- 함수에 적용, 콜백 함수 검사

const person = {
  getName : () => 'abc'
}
const name = person.getName?.()

function loadData(onComplete) {
  console.log('...loading')
  onComplete?.()
}
loadData()


- 배열의 아이템에 접근

const person = { friends: null, mother: null }
const prop = 'name'

const firstFriend = person.friends?.[0] // undefined
const name = person.mother?.[prop] // undefined


- 검사 단계를 많이 줄여준다.

const name = person && person.friends && person.friends[0] && person.friends[0].mother && person.friends[0].mother.name
const name2 = person?.friends?.[0]?.mother?.name

- nullish coalescing과 함께 기본값을 설정

const person = {}
const name = person?.friends?.[0]?.mother?.name ?? 'default name'