- 비구조화 할당 ( destructuring )
- 객체, 배열의 속성을 변수로 꺼냄

--------------------------------------

- 배열 비구조화

const arr1 = [1, 2]
const [a, b] = arr1
const [a = 10, b = 20] = arr1 // 기본값 지정 가능 

- swap을 추가 변수 없이 가능

let a = 1
let b = 2
[a, b] = [b, a]

- 중간 요소를 건너뛸 수 있음

const arr = [1, 2, 3]
const [a, , c] = arr

- 전개 연산자와 같이 사용

const arr = [1, 2, 3]
const [first, ...rest1] = arr
const [a, b, c, ...rest2] = arr

--------------------------------------

- 객체 비구조화

const obj1 = { age: 21, name: 'mike' }
const { age, name } = obj

const { a, b } = obj // 존재하지 않는 속성은 undefined
const { age: theAge, name } = obj // 원래 속성명과 다른 변수명으로 가져옴
const { age = 0, name = 'noName', grade = 'F' } = obj // 기본값 정의 가능, 원래값이 undefined일시 적용
const { age:theAge = 0, name } = obj

- 기본 값에 함수의 리턴값을 넣을 수 있다.
- 기본 값이 적용될때만 함수가 호출됨

function getDefaultAge() {
  console.log('hello')
  return 0;
}
const obj = { age: 21, grade: 'A' }
const { age = getDefaultAge(), grade } = obj

- 전개연산자와 같이 사용

const obj = { age: 21, name: 'mike', grade = 'A' }
const { age, ...rest } = obj;

- for문에서 비구조화

const people = [
  { age: 21, name: 'mike' },
  { age: 51, name: 'sara' }
]
for(const { age, name } of people) {
  // ...
}

- 객체의 중첩에 비구조화 할당

const obj = { name: 'mike', mother: { name: 'sara' }}
const {
  name,
  mother: { name: motherName }
} = obj

- 배열의 객체요소의 속성을 가져옴

const [{ prop: x } = { prop: 123 }] = [] // x는 123
const [{ prop: x } = { prop: 123 }] = [{}] // undefine가 아니므로 x에 undefined가 할당

- 비구조화에서 계산된 속성명
- 반드시 별칭을 써야함

cosnt index = 1
const { [`key${index}`] : valueOfTheIndex } = { key1 : 123 }


- 변수가 아닌 존재하는 객체나 배열에 할당

const obj = {}
const arr = []
({ foo: obj.prop, bar: arr[0] } = { foo : 123, bar: true })