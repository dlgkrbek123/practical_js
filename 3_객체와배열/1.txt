- 단축 속성명
- 객체 리터럴 코드를 간편하게 작성하기 위한 문법

cosnt name = 'mike'
const obj = {
  age: 21,
  name, // 기존의 변수명과 속성명이 같다면 단축
  getName() { 
    return this.name; // 함수도 간편하게 입력
  }
}

console.log({ name, age}) // 디버깅 시 좋음

--------------------------------------

- 계산된 속성명
- 객체의 속성명을 동적으로 결정
- 객체리터럴 내부에 [{변수명을 나타내는 표현식}]

function makeObject1(key, value) {
  const obj = {}
  obj[key] = value
  return obj
}

function makeObject2(key, value) {
  return { [key] : value  }
}

--------------------------------------

- 전개 연산자
- 배열, 객체의 모든 속성을 풀어해친다.

- 함수의 인자를 배열을 활용해서 전달
   Math.max(1, 3, 7, 9)
   const numbers = [1, 3, 7, 9]
   Math.max(...numbers)

- 배열이나 객체 복사시에 활용
   const arr1 = [1, 2, 3]
   const obj1 = { age: 23, name: 'mike'}
   const arr2 = [...arr1]
   const obj2 = {...obj1}

- 배열은 순서가 유지됨
   [1, ...[2, 3], 4]
   new Date(...[2018, 11, 24])

- 두개의 객체를 합성
- 중복된 속성명은 overwrite

   const obj1 = { age: 21, name: 'mike'}
   const obj2 = { hobby: 'soccer'}
   const obj3 = { ...obj1, ...obj2 }