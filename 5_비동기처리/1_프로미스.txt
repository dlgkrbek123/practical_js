- 비동기를 처리하는데 두가지 패턴이 있다.

---------------------------------------------

- 콜백 패턴
- 프로미스 이전에 득세한 패턴
- 함수를 인자로 입력받아 비동기 처리 후 해당 함수를 호출

function requestData(callback) {
  setTimeout(()=> {
    callback({ name: 'abc', age: 23 })
  }, 1000)
}
function onSuccess(data) {
  console.log(data)
}
console.log('call requestData')
requestData(onSuccess)


- 콜백이 중첩되면 가독성이 구려짐

function requestData1(callback) {

}
function requestData2(callback) {

}
function onSuccess1(data) {
  console.log(data)
  requestData2(onSuccess2)
}
function onSuccess2(data) {
  console.log(data)
}
requestData1(onSuccess1)

---------------------------------------------

- 프로미스 
- 비동기 상태를 값으로 다루는 객체
- 비동기 프로그래밍을 동기 프로그래밍처럼 코드 작성

function requestData1() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(10)
    }, 1000)
  })
}
function requestData2() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve(20)
    }, 1000)
  })
}

requestData1()
  .then(data => {
    console.log(data)
    return requestData2()
  })
  .then((data) => {
    console.log(data)
  })

- 3가지 방식으로 생성 가능
- 생성과 동시에 코드가 실행됨
- 객체는 3개의 state를 가짐 (pending, fufilled, rejected)
- fufilled, rejected는 settled 상태에 속한다.
- settled 상태가 되면 더이상 변이되지 않음


const p1 = new Promise((resolve, reject) => {
  // 비동기 처리가 끝나면 2가지 중 하나를 호출   
 })
const p2 = Promise.reject('error message') // rejected상태의 객체 생성
const p3 = Promise.resolve(param) // fufilled상태의 객체 생성


- 상태이외에 데이터를 가진다.
- then 메소드를 가지고 있어 비동기처리가 끝나면 수행될 작업을 정의
- then에 데이터가 전달된다.

requestData().then(onResolve, onReject)
Promise.resolve(123).then(data => console.log(data))
Promise.reject('error').then(null, data => console.log(data))


- then을 계속 체이닝 가능하다.
- then메소드가 항상 프로미스 객체를 리턴한다.

requestData1()
  .then(data => {
    console.log(data) // 10
    return requestData2()
  })
  .then(data => {
    console.log(data) // 20
    return data + 1
  })
  .then(data => {
    console.log(data) // 21
    throw new Error('some error')
  })
  .then((null , error => {
    // onReject가 호출
    // error객체가 데이터
    console.log('error!')
    // undefined를 데이터로 하는 프로미스 리턴
  })
  .then(data => {
    console.log(data) // undefined
  })


- onResolve나 onReject가 미구현시에는 
- 해당 프로미스를 그대로 전달한다.

Promise.reject('err')
  .then(() => console.log('then 1')) // 프로미스 전달
  .then(() => console.log('then 2')) // 프로미스 전달
  .then(
    () => console.log('then 3'), 
    () => console.log('then 4') // undefined / fufilled 프로미스 리턴
  )
  .then(
    () => console.log('then 5'), // undefined / fufilled 프로미스 리턴
    () => console.log('then 6')
  )

---------------------------------------------

- catch는 rejected 상태인 프로미스를 처리
- 사실 then을 이용해서 호출하는것과 같음, 가독성
- catch도 프로미스를 리턴, 체이닝 가능

Promise.reject(1).then(null, error => {
  console.log(error)
})
Promise.reject(1).catch(error => {
  console.log(error)    
})


Promise.resolve().then(
  () => {
    throw new Error('some error')
    // undefined / rejected 프로미스 리턴
  },
  error => {
    console.log(error)
  }
)
Promise.resolve()
  .then(() => {
    throw new Error('some error')
    // undefined / rejected 프로미스 리턴
  })
  .catch(error => {
    console.log(error) // undefined / resolved 프로미스 리턴
  })


Promise.reject(10)
  .then((data) => {
    // skip
    console.log('then1', data)
    return 20
  })
  .catch(data => {
    console.log('catch', data) // 10
    return 30
  })
  .then(data => {
    console.log('then2', data) // 30
  })

---------------------------------------------

- finally 메소드
- fufilled, rejected 둘 다 처리가능
- finally에는 데이터가 넘어오지 않는다.
- 이전의 프로미스 객체를 그대로 반환

Promise.resolve(10)
  .then(data => {
    console.log('onThen', data) // 10
    return data + 1
  })
  .catch(error => {
    // skip
    console.log('onCatch')
    return 100
  })
  .finally(() => {
    console.log('onFinally')
  })
  .then(data => {
    console.log('onThen', data) // 11
    return data + 1
  })


function requestData() {
  return fetch()
    .catch(error => {
      // 에러 처리
      // 여기서 예외가 발생하지 않으면 
      // fufilled 상태인 프로미스가 리턴
    })
    .finally(() => {
      sendLogToServer('request finished')
    })
}
requestData().then(data => console.log(data))

---------------------------------------------

- 프로미스는 비동기 처리를 순차적으로 수행 (병렬처리 x)
- 의존성이 없는 비동기처리는 병렬로 처리하는게 좋다.

requestData()
  .then(data => {
    console.log(data)
    return requestData2()
  })
  .then(data => {
    // 2초 소요
    console.log(data)
  })


- 아래와 같이 병렬로 처리가능
- 하지만 복수개의 비동기 처리가 모두 완수되는 타이밍 캐치 불가

requestData1().then((data) => console.log(data))
requestData2().then((data) => console.log(data))


- Promise.all
- 모든 promise가 fufilled되어야 fufilled
- 하나라도 reject되면 reject

Promise.all([requestData1(), requestData2()])
  .then(([data1, data2]) => {
    console.log(data1, data2)
  })


- Promise.race
- 여러개의 프로미스중 가장 빨리 settled가 된 promise를 반환

Promise.race([ 
  requestData1(),  
  new Promise((_, reject) => setTimeout(reject, 3000)) 
])
  .then(data => console.log('fufilled', data))
  .catch(error => console.log('rejected'))
// 요청이 3초이내로 완수되지 않으면 
// rejected된 프로미스가 처리된다.


- 프로미스 캐싱 예제
- 프로미스의 상태가 settled되면 더이상 변하지 않는다.

let cachedPromise
function getData() {
  cachedPromise = cachedPromise || requestData()
  return cachedPromise
}
getData().then(v => console.log(v))
getData().then(v => console.log(v))


- then 메서드에서 return을 잊기 쉽다
- undefined / fufilled 프로미스가 리턴됨
- then은 기본 프로미스의 상태를 바꾸는게 아니라 
- 매번 새로운 객체를 리턴한다.

Promise.resolve(10)
  .then(data => {
    console.log(data)
    Promise.resolve(20) // 리턴을 깜박함

    return 20 // 둘 중 하나를 입력해 버그 수정
    return new Promise(20)
  })
  .then(data => {
    console.log(data)
  })


- Promise를 중첩해서 사용하는건 권장되지 않는다.

requestData1()
  .then(result1 => {
    return requestData2(result1).then(result2 => {
      console.log({ result2 })
    })
  })
  .then(() => console.log('end'))

requestData1()
  .then(result1 => requestData2(result1))
  .then(result2 => console.log({ result2 }))
  .then(() => console.log('end'))


- Promise의 데이터를 다다음 Promise에 전달하고 싶다.

requestData1()
  .then(result1 => {
    return requestData2(result1)
  })
  .then((result1, result2) => {
    console.log({ result1, result2 })
  })

1. 프로미스 중첩

requestData1()
  .then(result1 => {
    return requestData2(result1).then(result2 => {
      return [result1, result2]
    })  
  })
  .then(([result1, result2]) => {
    console.log({ result1, result2 })
  })

2. Promise.all

requestData1()
  .then((result1) => {
    return Promise.all([result1, requestData2()])
  })
  .then(([result1, result2]) => {
    console.log({ result1, result2 })
  })


- 동기코드와 같이 사용시 예외처리에 신경써야함
- then안에 넣어서 catch에서 처리되도록 하자

function doSync() {
  throw new Error('some error')
}
function requestData() {
  doSync() // 예외가 먼저 발생해 아래 코드 실행 안됨
  return fetch()
    .then(data => console.log(data))
    .catch(error => console.log(error))
}